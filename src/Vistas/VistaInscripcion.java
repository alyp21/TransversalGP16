
package Vistas;

import Modelo.Alumno;
import Modelo.Inscripcion;
import Modelo.Materia;
import Persistencia.AlumnooData;
import Persistencia.Conexion;
import Persistencia.InscripcioonData;
import Persistencia.MateriaData;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.mariadb.jdbc.Connection;


public class VistaInscripcion extends javax.swing.JInternalFrame {

    private Connection con;
    
    private List<Materia> listaM;
    private List<Alumno> listaA;
    
    private InscripcioonData ins;
    private MateriaData mData;
    private AlumnooData aData;
    DefaultTableModel modelo;
    
    public VistaInscripcion() {
        initComponents();
        con = (Connection) Conexion.getConexion();
        aData = new AlumnooData(con);
        mData = new MateriaData(con);
        listaA = aData.verAlumnos();
        modelo = new DefaultTableModel();
        
        ins = new InscripcioonData(con);
        armarCabeceraTabla();
        cargaAlumnos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();
        jbInscribir = new javax.swing.JButton();
        jbAnular = new javax.swing.JButton();
        rbMateriasInscriptas = new javax.swing.JRadioButton();
        jAlumnos = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rbMateriasNoInscriptas = new javax.swing.JRadioButton();
        jbSalir = new javax.swing.JButton();
        jcbAlumno = new javax.swing.JComboBox<>();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setClosable(true);

        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "AÃ±o", "Estado"
            }
        ));
        jtMaterias.setToolTipText("");
        jScrollPane1.setViewportView(jtMaterias);

        jbInscribir.setText("Inscribir");
        jbInscribir.setEnabled(false);
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        jbAnular.setText("Anular Inscripcion");
        jbAnular.setEnabled(false);
        jbAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularActionPerformed(evt);
            }
        });

        rbMateriasInscriptas.setText("Materias inscriptas");
        rbMateriasInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMateriasInscriptasActionPerformed(evt);
            }
        });

        jAlumnos.setText("Alumno");

        jLabel1.setText("LISTADO DE MATERIAS");

        rbMateriasNoInscriptas.setText("No Inscriptas");
        rbMateriasNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMateriasNoInscriptasActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jcbAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(rbMateriasInscriptas, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(rbMateriasNoInscriptas))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbInscribir, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbAnular)
                                .addGap(176, 176, 176)
                                .addComponent(jbSalir)))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMateriasInscriptas)
                    .addComponent(rbMateriasNoInscriptas))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInscribir)
                    .addComponent(jbAnular)
                    .addComponent(jbSalir))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inscriptasActionPerformed
    
    }//GEN-LAST:event_inscriptasActionPerformed

    private void rbMateriasInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMateriasInscriptasActionPerformed
        borrarFilaTabla();
        rbMateriasNoInscriptas.setSelected(false);
        cargaDatosIncriptas();
        jbInscribir.setEnabled(false);
        jbAnular.setEnabled(true);
    }//GEN-LAST:event_rbMateriasInscriptasActionPerformed

    private void rbMateriasNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMateriasNoInscriptasActionPerformed
       borrarFilaTabla();
       rbMateriasInscriptas.setSelected(false);
       cargaDatosNoInscriptas();
       jbAnular.setEnabled(false);
       jbInscribir.setEnabled(true);
    }//GEN-LAST:event_rbMateriasNoInscriptasActionPerformed

    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        try{
        int filaSeleccionada= jtMaterias.getSelectedRow();
        
        if(filaSeleccionada != -1){
            Alumno a= (Alumno) jcbAlumno.getSelectedItem();
            
            int idMateria=(Integer) modelo.getValueAt(filaSeleccionada, 0);
            String nombreMateria= (String) modelo.getValueAt(filaSeleccionada, 1);
            int anio= (Integer) modelo.getValueAt(filaSeleccionada,2);
            String estadoComoTexto= (String)modelo.getValueAt(filaSeleccionada, 3);
            boolean estado = estadoComoTexto.equals("Activo");
            Materia m= new Materia(idMateria,nombreMateria,anio,estado);
            
            
            Inscripcion i= new Inscripcion (a,m,0);
            ins.guardarIncripcion(i);
//          borrarFilaTabla();
            modelo.removeRow(filaSeleccionada);
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione una materia para hacer la inscripcion");
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al guardar la inscripcion del alumno seleccionado"+e.getMessage());
        }
    }//GEN-LAST:event_jbInscribirActionPerformed

    private void jbAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularActionPerformed
        int filaSeleccionada=jtMaterias.getSelectedRow();
        if(filaSeleccionada!=-1){
            Alumno a =(Alumno) jcbAlumno.getSelectedItem();
            int idMateria= (Integer)modelo.getValueAt(filaSeleccionada, 0);
            
            ins.borrarInscripcionMateriaAlumno(a.getId(), idMateria);
//          borrarFilaTabla();
            modelo.removeRow(filaSeleccionada);
        }
        
    }//GEN-LAST:event_jbAnularActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jcbAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnoActionPerformed
        //Esto borra las filas de la tabla para que se muestre vacia
        borrarFilaTabla();
        //Comprueba si el filtro estÃ¡ activo (inscriptas o no inscriptas)
        if(rbMateriasInscriptas.isSelected()){
            //Carga las materias inscriptas del nuevo alumno
            cargaDatosIncriptas();
        }else if(rbMateriasNoInscriptas.isSelected()){
            //Carga las materias no inscriptas del nuevo alumno
            cargaDatosNoInscriptas();
        }
        //Y en el caso de que ningÃºn rb estÃ© seleccionado la tabla se mostrarÃ¡ vacÃ­a
    }//GEN-LAST:event_jcbAlumnoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jAlumnos;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAnular;
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbAlumno;
    private javax.swing.JTable jtMaterias;
    private javax.swing.JRadioButton rbMateriasInscriptas;
    private javax.swing.JRadioButton rbMateriasNoInscriptas;
    // End of variables declaration//GEN-END:variables
    private void cargaAlumnos(){
        for(Alumno item: listaA){
            jcbAlumno.addItem(item);
        }
    }
    private void borrarFilaTabla(){
        int indice = modelo.getRowCount() -1;
        
        for (int i = indice; i>=0; i--){
            modelo.removeRow(i);
        }
    }
    private void cargaDatosNoInscriptas(){
        try{
        Alumno selec= (Alumno)jcbAlumno.getSelectedItem();
        listaM =ins.obtenerMateriasNoCursadas(selec.getId());
        for(Materia m: listaM){
            modelo.addRow(new Object[] {m.getIdMateria(), m.getNombreMateria(), m.getAnioMateria(),m.getEstadoString()});
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(this, "Error al cargar los datos de las materias no inscriptas");
        }
    }
    private void cargaDatosIncriptas(){
    try{
        Alumno selec= (Alumno) jcbAlumno.getSelectedItem();
        List <Materia> lista= ins.obtenerMateriasCursadas(selec.getId());
        for (Materia m : lista){
            modelo.addRow(new Object[] {m.getIdMateria(),m.getNombreMateria(),m.getAnioMateria(),m.getEstadoString()});
        }
    }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al cargar los datos de las materias inscriptas");
        }
    }
    private void armarCabeceraTabla() {
        ArrayList<Object> filaCabecera = new ArrayList<>();
        filaCabecera.add("ID");
        filaCabecera.add("Nombre");
        filaCabecera.add("AÃ±o");
        filaCabecera.add("Estado");
        for(Object it: filaCabecera){
            modelo.addColumn(it);
        }
        jtMaterias.setModel(modelo);
    }
}