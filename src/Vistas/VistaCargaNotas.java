
package Vistas;

import java.sql.Connection;
import Persistencia.Conexion;
import Persistencia.InscripcioonData;
import Persistencia.AlumnooData;
import Modelo.Alumno;
import Modelo.Inscripcion;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class VistaCargaNotas extends javax.swing.JInternalFrame {
 

    private Connection con;
    private InscripcioonData ins;
    private Inscripcion in;
    private AlumnooData ad;
    DefaultTableModel modeloT;
    
    
    public VistaCargaNotas() {
        initComponents();
         
        con = (Connection) Conexion.getConexion();
        ins = new InscripcioonData((org.mariadb.jdbc.Connection) con);
        ad = new AlumnooData(con);
        armarCabeceraTabla();
        cargarAlumnos();
    }      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtCargaNotas = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jlCargaNotas = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jcbAlumnos = new javax.swing.JComboBox<>();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtCargaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Nota"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtCargaNotas);
        if (jtCargaNotas.getColumnModel().getColumnCount() > 0) {
            jtCargaNotas.getColumnModel().getColumn(0).setResizable(false);
            jtCargaNotas.getColumnModel().getColumn(1).setResizable(false);
            jtCargaNotas.getColumnModel().getColumn(2).setResizable(false);
        }

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(jbGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalir)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar)
                    .addComponent(jbSalir)))
        );

        jlCargaNotas.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlCargaNotas.setText("Carga de Notas");

        jLabel1.setText("Seleccione un alumno");

        jcbAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jlCargaNotas)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(jcbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jlCargaNotas)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void borrarFilas(){
      int a = modeloT.getRowCount() - 1;
        for(; a >= 0; a--){
        modeloT.removeRow(a);
    }
    }
    
    private void jcbAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnosActionPerformed
        borrarFilas();
           
        Alumno alumnoSel = (Alumno) jcbAlumnos.getSelectedItem();
        if(alumnoSel == null){
            return;
        }
        List<Inscripcion> inscripciones;
        try{
            inscripciones = ins.obtenerInscripcionesPorAlumno(alumnoSel.getId());
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Error al cargar las inscripciones");
            return;
        }
        for(Inscripcion insc : inscripciones){
            if(insc.getMateria()!= null){
                modeloT.addRow(new Object[]{
                    insc.getMateria().getIdMateria(),
                    insc.getMateria().getNombreMateria(),
                    insc.getNota()
                });
            }
        }
    }//GEN-LAST:event_jcbAlumnosActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        if(jtCargaNotas.isEditing()){
            jtCargaNotas.getCellEditor().stopCellEditing();
        }
        Alumno alumnoSelec = (Alumno) jcbAlumnos.getSelectedItem();
        if(alumnoSelec == null){
            JOptionPane.showMessageDialog(this,"Tiene que seleccionar un alumno para guardar");
        }
        int idAlumno = alumnoSelec.getId();
        
        boolean todasGuardadas = true;
        for(int i = 0; i< modeloT.getRowCount();i++){
            try{
                int idMateria = (Integer) modeloT.getValueAt(i,0);
                double nuevaNota = Double.parseDouble(modeloT.getValueAt(i, 2).toString());
                
                if(!ins.actualizarNota(idAlumno, idMateria, nuevaNota)){
                    todasGuardadas = false;
                }
            }catch(NumberFormatException nf){
                JOptionPane.showMessageDialog(this, "Fijarse en la nota" + (i+1)+" no es un numero valido");
                return;
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, " no se guardo la nota " + e.getMessage());
                return;
            }
        }
            if (todasGuardadas) {
            JOptionPane.showMessageDialog(this, "Notas actualizadas correctamente.");
            }else{
        JOptionPane.showMessageDialog(this, "Error: Algunas notas no se pudieron actualizar.");
        }
    }//GEN-LAST:event_jbGuardarActionPerformed
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbAlumnos;
    private javax.swing.JLabel jlCargaNotas;
    private javax.swing.JTable jtCargaNotas;
    // End of variables declaration//GEN-END:variables
    
    private void armarCabeceraTabla() {
    // Usamos una clase anónima para sobrescribir 'isCellEditable'
        modeloT = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
    // Permite que solo la columna de "Nota" (índice 2) sea editable
            return column == 2;
        }
    };
        // Columnas correctas
        modeloT.addColumn("ID Materia");     // Columna 0
        modeloT.addColumn("Nombre Materia"); // Columna 1
        modeloT.addColumn("Nota");           // Columna 2
    
        jtCargaNotas.setModel(modeloT);
}
    public void cargarAlumnos(){
    jcbAlumnos.removeAllItems();
    List<Alumno> lista = ad.verAlumnos();
    
   for(Alumno a: lista){
       jcbAlumnos.addItem(a);
   }
    }
}
